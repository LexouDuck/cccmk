#!/bin/sh -e

#! utility variables & functions for colored terminal output

ansi_esc()      { printf "\033[""$@""m" ; }
ansi_color_fg() { printf "\033[38;5;""$@""m" ; }
ansi_color_bg() { printf "\033[48;5;""$@""m" ; }
# reset text style to default
io_reset="`     ansi_esc 0`"
# set text style
io_bold="`      ansi_esc 1`"
io_underline="` ansi_esc 4`"
# set text color (foreground)
io_red="`       ansi_esc 31`"
io_green="`     ansi_esc 32`"
io_yellow="`    ansi_esc 33`"
io_blue="`      ansi_esc 34`"
io_magenta="`   ansi_esc 35`"
io_cyan="`      ansi_esc 36`"

print_verbose() {
if $verbose; then { printf "%s%s%s%s\n" "$io_blue"   "verbose" "$io_reset: " "$@" ; } >&2 ; fi ; }
print_message() { { printf "%s%s%s%s\n" "$io_blue"   "message" "$io_reset: " "$@" ; } >&2 ; }
print_warning() { { printf "%s%s%s%s\n" "$io_yellow" "warning" "$io_reset: " "$@" ; } >&2 ; }
print_success() { { printf "%s%s%s%s\n" "$io_green"  "success" "$io_reset: " "$@" ; } >&2 ; }
print_failure() { { printf "%s%s%s%s\n" "$io_red"    "failure" "$io_reset: " "$@" ; } >&2 ; }
print_error()   { { printf "%s%s%s%s\n" "$io_red"    "error"   "$io_reset: " "$@" ; } >&2 ; exit 1 ; }



#! The filepath of the version file
VERSIONFILE=VERSION

#! List of files with changes in this commit
CHANGED="` git diff --cached --name-only || echo '' `"
print_message "Files changed:"
printf "$io_cyan""$CHANGED""$io_reset""\n"

#! List of important files (which, when changed, should update the version number)
SOURCES="./.githooks/pre-commit"
SOURCES="$SOURCES ` find -type f \( -name '*.sh' -or -name '*.bash' -or -name '*.awk' \) `"



match=false
for i in $CHANGED
do
	if printf "$SOURCES" | grep -q "./$i"
	then
		match=true
		break
	fi
done

if $match
then
	print_message "Detected changes to project source files."
	if printf "$CHANGED" | grep -q "^$VERSIONFILE$"
	then
		print_message "Project version file '$VERSIONFILE' has already been updated."
	else
		awk '
		BEGIN { incremented = 0; }
		{
			if (match($0, /@[0-9]+(\.[0-9]+)*/))
			{
				before  = substr($0, 1, RSTART + 1);
				version = substr($0, RSTART + 1, RLENGTH - 1);
				after   = substr($0, RSTART + RLENGTH);
				split(version, parts, ".");
				major = parts[0] + 0; # parse int
				minor = parts[1] + 0; # parse int
				patch = parts[2] + 0; # parse int
				patch += 1;
				incremented = 1;
				print (before + "@" + major + "." + minor + "." + patch + after);
			}
			else { print; }
		}
		END { exit(!incremented); }
		' "$VERSIONFILE" > "$VERSIONFILE.tmp" \
		&& mv "$VERSIONFILE.tmp" "$VERSIONFILE" \
		&& print_success "auto-incremented version number in $VERSIONFILE:" \
		|| print_warning "failed to auto-increment version number in $VERSIONFILE:"
		printf "$io_cyan""`cat $VERSIONFILE`""$io_reset""\n"
		rm -f "$VERSIONFILE.tmp"
		git add "$VERSIONFILE"
	fi
fi

exit 0
